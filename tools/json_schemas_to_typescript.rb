module JsonSchemasToTypescript
  SCHEMA_DIRECTORY = 'spec/support/schemas'
  API_SCHEMA_DIRECTORY = "#{SCHEMA_DIRECTORY}/api".freeze
  BOOTSTRAP_SCHEMA_DIRECTORY = "#{SCHEMA_DIRECTORY}/bootstrap".freeze

  types_directory = 'app/javascript/types'
  BOOTSTRAP_TYPES_DIRECTORY =
    Rails.root.join("#{types_directory}/bootstrap").to_s.freeze
  RESPONSE_TYPES_DIRECTORY =
    Rails.root.join("#{types_directory}/responses").to_s.freeze

  SCHEMA_DIRECTORY_REGEX = %r{\A#{SCHEMA_DIRECTORY}/(api|bootstrap)/}

  class << self
    def initialize_listener(app)
      return if @initialized
      # NOTE: We don't want to regenerate the files each time we run specs, for example.
      return if !defined?(Rails::Server)

      @initialized = true

      app.config.after_initialize do
        listener =
          ::Listen.to(Rails.root.join(SCHEMA_DIRECTORY).to_s) do |_changed, _added, _removed|
            JsonSchemasToTypescript.write_files
          end

        listener.start
      end

      app.config.to_prepare do
        JsonSchemasToTypescript.write_files
      end
    end

    # rubocop:disable Metrics/MethodLength
    def write_files
      [BOOTSTRAP_TYPES_DIRECTORY, RESPONSE_TYPES_DIRECTORY].each do |directory|
        FileUtils.rm_rf(directory)
        FileUtils.mkdir_p(directory)
      end

      [
        [API_SCHEMA_DIRECTORY, 'Response', RESPONSE_TYPES_DIRECTORY],
        [BOOTSTRAP_SCHEMA_DIRECTORY, 'Bootstrap', BOOTSTRAP_TYPES_DIRECTORY],
      ].each do |schema_directory, type_suffix, types_directory|
        Dir["#{schema_directory}/**/*.json"].each do |schema_path|
          response_name =
            schema_path.
              gsub(SCHEMA_DIRECTORY_REGEX, '').
              delete_suffix('.json').
              split('/').
              then do |path_fragments|
                if path_fragments[-1] == 'index'
                  [*path_fragments[0..-3].map(&:singularize), *path_fragments[-2..]]
                else
                  path_fragments.map(&:singularize)
                end
              end.
              join('/').
              camelize.
              gsub('::', '')

          type_name = "#{response_name}#{type_suffix}"

          file_to_write = "#{types_directory}/#{type_name}.ts"

          typescript_content = <<~JS
            // This is a generated file. Do not edit this file directly.

            import { FromSchema } from 'json-schema-to-ts';

            const schema = #{File.read(schema_path).rstrip} as const;

            export type #{type_name} = FromSchema<typeof schema>;
          JS

          File.write(file_to_write, typescript_content)
        end
      end
    end
    # rubocop:enable Metrics/MethodLength
  end
end
