x-logging-config: &default-logging
  driver: 'json-file'
  options:
    max-size: '100m'
    max-file: '5'
    compress: 'true'

x-rails-config: &default-rails-config
  build:
    context: .
  depends_on:
    initialize_database:
      condition: service_completed_successfully
  env_file:
    # NOTE: We need this to have DATABASE_URL in bin/docker-entrypoint.
    - .env.production.local
  logging: *default-logging
  networks:
    - external
    - internal

x-redis-config: &redis
  depends_on:
    vector:
      condition: service_started
  healthcheck:
    test: ['CMD', 'redis-cli', 'ping']
    start_period: 20s
    start_interval: 1s
    interval: 5m
    timeout: 1s
    retries: 1
  image: redis:7.2.5-alpine
  logging: *default-logging
  networks:
    - internal

services:
  certbot:
    depends_on:
      vector:
        condition: service_started
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    healthcheck:
      test: certbot --version
      start_period: 30s
      start_interval: 3s
      interval: 1h
      timeout: 3s
      retries: 1
    image: certbot/certbot
    logging: *default-logging
    networks:
      - external
    volumes:
      - ./ssl-data/certbot/conf:/etc/letsencrypt
      - ./ssl-data/certbot/www:/var/www/_letsencrypt
  clock:
    <<: *default-rails-config
    command: ['bin/skedjewel']
    healthcheck:
      test: ps -eo cmd | grep -P '^[b]in/skedjewel$'
      start_period: 10s
      start_interval: 2s
      interval: 5m
      timeout: 1s
      retries: 1
  grafana:
    depends_on:
      - loki
    env_file:
      - .env.grafana.local
    expose:
      - '3000'
    image: grafana/grafana:latest
    networks:
      - external # Allows Grafana to download plugins.
      - internal
    volumes:
      - grafana-data:/var/lib/grafana
  initialize_database:
    <<: *default-rails-config
    depends_on:
      postgres:
        condition: service_healthy
      redis-app:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
      vector:
        condition: service_started
  loki:
    image: grafana/loki:latest
    expose:
      - '3100'
    networks:
      - internal
    volumes:
      - loki-data:/loki
  nginx:
    depends_on:
      vector:
        condition: service_started
    entrypoint: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & /docker-entrypoint.sh nginx -g "daemon off;"'''
    env_file:
      - .env.nginx.local
    healthcheck:
      test: curl --insecure -s -o /dev/null -w "%{http_code}" https://localhost/up | grep -q "^200$" || false
      start_period: 20s
      start_interval: 1s
      interval: 60s
      timeout: 1s
      retries: 1
    image: nginx:1.27.0-alpine
    logging: *default-logging
    networks:
      - external
      - internal
    ports:
      - 80:80
      - 443:443
    profiles:
      - nondefault
    volumes:
      - ./config/nginx/:/etc/nginx/
      - ./ssl-data/certbot/conf:/etc/letsencrypt
      - ./ssl-data/certbot/www:/var/www/_letsencrypt
      - app-public:/var/www/david-runger-public:ro
  postgres:
    depends_on:
      vector:
        condition: service_started
    env_file:
      - .env.postgres.local
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'david_runger']
      start_period: 20s
      start_interval: 1s
      interval: 5m
      timeout: 1s
      retries: 1
    image: postgres:16.3-alpine
    logging: *default-logging
    networks:
      - internal
    volumes:
      - postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_INITDB_ARGS: --auth=scram-sha-256
      POSTGRES_USER: david_runger
  redis-app:
    <<: *redis
    # https://stackoverflow.com/a/72593084/4009384
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD is required}"
    env_file:
      - .env.redis-app.local
    volumes:
      - redis:/data
  redis-cache:
    <<: *redis
    # https://stackoverflow.com/a/72593084/4009384
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server /usr/local/etc/redis/redis.conf --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD is required}"
    env_file:
      - .env.redis-cache.local
    volumes:
      - ./redis/redis-cache.conf:/usr/local/etc/redis/redis.conf
  s3_db_backup:
    depends_on:
      vector:
        condition: service_started
    env_file:
      - .env.s3_db_backup.local
    image: dokku/s3backup
    logging: *default-logging
    networks:
      - external
    profiles:
      - nondefault
  vector:
    command:
      - '--config'
      - '/etc/vector/vector.yaml'
      - '--require-healthy'
      - 'true'
      - '--watch-config'
    env_file:
      - .env.vector.local
    image: timberio/vector:latest-alpine
    networks:
      - external
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./vector/vector.yaml:/etc/vector/vector.yaml:ro
  web:
    <<: *default-rails-config
    command: ['bin/rails', 'server', '--binding', '0.0.0.0']
    expose:
      - '3000'
    healthcheck:
      test: curl --silent --output /dev/null --fail localhost:3000/up
      start_period: 30s
      start_interval: 1s
      interval: 1m
      timeout: 1s
      retries: 1
    profiles:
      - nondefault
    volumes:
      - ./blog:/app/blog
  worker:
    <<: *default-rails-config
    command: ['bin/sidekiq']
    healthcheck:
      test: REDIS_URL="$$REDIS_URL/1" bin/sidekiqmon | grep --quiet "$$(hostname)"
      start_period: 60s
      start_interval: 10s
      interval: 5m
      timeout: 10s
      retries: 1

networks:
  external:
    driver: bridge
  internal:
    driver: bridge
    internal: true

volumes:
  app-public:
  grafana-data:
  loki-data:
  postgresql:
  redis:
