x-logging-config: &default-logging
  driver: 'json-file'
  options:
    max-size: '100m'
    max-file: '5'
    compress: 'true'

x-rails-config: &default-rails-config
  build:
    context: .
  depends_on:
    initialize_database:
      condition: service_completed_successfully
  env_file:
    # NOTE: We need this to have DATABASE_URL in bin/docker-entrypoint.
    - .env.production.local
  environment:
    PROMETHEUS_EXPORTER_HOST: rails_metrics
  logging: *default-logging
  networks:
    - external
    - internal

x-redis-config: &redis
  depends_on:
    redis-overcommit:
      condition: service_started
    vector:
      condition: service_started
  healthcheck:
    test: ['CMD', 'redis-cli', 'ping']
    start_period: 20s
    start_interval: 1s
    interval: 5m
    timeout: 1s
    retries: 1
  image: redis:7.2.5-alpine
  logging: *default-logging
  networks:
    - internal

services:
  cadvisor:
    command:
      # Add options to lower CPU/memory use. https://github.com/google/cadvisor/issues/ 2523
      - '--docker_only'
      - '--housekeeping_interval=30s'
      - '--enable_metrics'
      - 'cpu,diskIO,memory,network'
    cpu_shares: 512
    expose:
      - '8080'
    image: gcr.io/cadvisor/cadvisor:v0.49.2
    networks:
      - internal
    volumes:
      - /sys:/sys:ro # Seems to be needed for CPU and Disk I/O usage.
      - /var/lib/docker/:/var/lib/docker:ro # Seems to be needed for memory usage.
      - /var/run/docker.sock:/var/run/docker.sock:ro # Seems to be needed for anything to work.
  certbot:
    cpu_shares: 256
    depends_on:
      vector:
        condition: service_started
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    healthcheck:
      test: certbot --version
      start_period: 30s
      start_interval: 5s
      interval: 1h
      timeout: 10s
      retries: 1
    image: certbot/certbot
    logging: *default-logging
    networks:
      - external
    volumes:
      - ./ssl-data/certbot/conf:/etc/letsencrypt
      - ./ssl-data/certbot/www:/var/www/_letsencrypt
  clock:
    <<: *default-rails-config
    command: ['bin/skedjewel']
    cpu_shares: 1024
    deploy:
      resources:
        limits:
          memory: 99G
        reservations:
          memory: 6M
    healthcheck:
      test: ps -eo cmd | grep -P '^[b]in/skedjewel$'
      start_period: 10s
      start_interval: 2s
      interval: 5m
      timeout: 1s
      retries: 1
    memswap_limit: 99G
  grafana:
    cpu_shares: 512
    depends_on:
      - loki
      - prometheus
    env_file:
      - .env.grafana.local
    expose:
      - '3000'
    image: grafana/grafana:latest
    networks:
      - external # Allows Grafana to download plugins.
      - internal
    volumes:
      - grafana-data:/var/lib/grafana
  initialize_database:
    <<: *default-rails-config
    cpu_shares: 256
    depends_on:
      postgres:
        condition: service_healthy
      redis-app:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
      vector:
        condition: service_started
  loki:
    cpu_shares: 512
    image: grafana/loki:latest
    expose:
      - '3100'
    networks:
      - internal
    volumes:
      - loki-data:/loki
  nginx:
    cpu_shares: 4096
    depends_on:
      vector:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 99G
        reservations:
          memory: 10M
    entrypoint: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & /docker-entrypoint.sh nginx -g "daemon off;"'''
    env_file:
      - .env.nginx.local
    healthcheck:
      test: |-
        curl -s -o /dev/null -w "%{http_code}" --header 'Host: davidrunger.com' http://localhost/nginx-health | grep -q "^200$" || false
      start_period: 60s
      start_interval: 2s
      interval: 5m
      timeout: 3s
      retries: 1
    image: nginx:1.27.0-alpine
    logging: *default-logging
    memswap_limit: 99G
    networks:
      - external
      - internal
    ports:
      - 80:80
      - 443:443
    profiles:
      - nondefault
    volumes:
      - ./config/nginx/:/etc/nginx/
      - ./ssl-data/certbot/conf:/etc/letsencrypt
      - ./ssl-data/certbot/www:/var/www/_letsencrypt
      - app-public:/var/www/david-runger-public:ro
  node_exporter:
    cpu_shares: 512
    expose:
      - '9100'
    image: prom/node-exporter:latest
    networks:
      - internal
  postgres:
    cpu_shares: 2048
    depends_on:
      vector:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 99G
        reservations:
          memory: 50M
    env_file:
      - .env.postgres.local
    environment:
      POSTGRES_INITDB_ARGS: --auth=scram-sha-256
      POSTGRES_USER: david_runger
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'david_runger']
      start_period: 20s
      start_interval: 1s
      interval: 5m
      timeout: 1s
      retries: 1
    image: postgres:17.2-alpine
    logging: *default-logging
    memswap_limit: 99G
    networks:
      - internal
    volumes:
      - postgres-data-v17:/var/lib/postgresql/data
  prometheus:
    cpu_shares: 512
    expose:
      - '9090'
    image: prom/prometheus:latest
    networks:
      - internal
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
  rails_metrics:
    <<: *default-rails-config
    cpu_shares: 512
    entrypoint: bin/prometheus_exporter --bind 0.0.0.0
    expose:
      - '9394'
    networks:
      - internal
  redis-app:
    <<: *redis
    # https://stackoverflow.com/a/72593084/4009384
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD is required}"
    cpu_shares: 2048
    deploy:
      resources:
        limits:
          memory: 99G
        reservations:
          memory: 12M
    env_file:
      - .env.redis-app.local
    memswap_limit: 99G
    volumes:
      - redis:/data
  redis-cache:
    <<: *redis
    # https://stackoverflow.com/a/72593084/4009384
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server /usr/local/etc/redis/redis.conf --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD is required}"
    cpu_shares: 2048
    deploy:
      resources:
        limits:
          memory: 99G
        reservations:
          memory: 6M
    env_file:
      - .env.redis-cache.local
    memswap_limit: 99G
    volumes:
      - ./redis/redis-cache.conf:/usr/local/etc/redis/redis.conf
  redis-overcommit:
    build: https://raw.githubusercontent.com/bkuhl/redis-overcommit-on-host/09215f160d59a7289ab3f4734f235659cdb8d269/Dockerfile
    cpu_shares: 256
    restart: 'no'
    volumes:
      - /proc/sys/vm:/mnt/vm
  s3_db_backup:
    cpu_shares: 256
    depends_on:
      vector:
        condition: service_started
    env_file:
      - .env.s3_db_backup.local
    image: dokku/s3backup
    logging: *default-logging
    networks:
      - external
    profiles:
      - nondefault
  vector:
    command:
      - '--config'
      - '/etc/vector/vector.yaml'
      - '--require-healthy'
      - 'true'
      - '--watch-config'
    cpu_shares: 512
    image: timberio/vector:latest-alpine
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./vector/vector.yaml:/etc/vector/vector.yaml:ro
  web:
    <<: *default-rails-config
    command: ['bin/rails', 'server', '--binding', '0.0.0.0']
    cpu_shares: 4096
    deploy:
      resources:
        limits:
          memory: 99G
        reservations:
          memory: 230M
    expose:
      - '3000'
    healthcheck:
      test: curl --silent --output /dev/null --fail localhost:3000/up
      start_period: 60s
      start_interval: 2s
      interval: 5m
      timeout: 5s
      retries: 1
    memswap_limit: 99G
    profiles:
      - nondefault
    volumes:
      - ./blog:/app/blog
  worker:
    <<: *default-rails-config
    command: ['bin/sidekiq']
    cpu_shares: 1024
    deploy:
      resources:
        reservations:
          memory: 36M
    healthcheck:
      test: REDIS_URL="$$REDIS_URL/1" bin/sidekiqmon | grep --quiet "$$(hostname)"
      start_period: 60s
      start_interval: 10s
      interval: 5m
      timeout: 10s
      retries: 1

networks:
  external:
    driver: bridge
  internal:
    driver: bridge
    internal: true

volumes:
  app-public:
  grafana-data:
  loki-data:
  postgres-data-v17:
  prometheus-data:
  redis:
