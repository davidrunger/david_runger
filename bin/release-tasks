#!/usr/bin/env ruby
# frozen_string_literal: true

if !defined?(Rails)
  exec(
    File.expand_path('rails', __dir__),
    'runner',
    File.expand_path(__FILE__),
  )
end

class Runner
  def run_task(task_description)
    print("#{task_description}... ")
    start_time = Time.current
    yield
    puts("done. (Took #{(Time.current - start_time).round(2)} seconds.)")
  end
end

runner = Runner.new

runner.run_task('Running db:migrate') do
  Rails.application.load_tasks

  (1..10).each do |attempt_number|
    print("attempt ##{attempt_number}... ")
    Rake::Task['db:migrate'].invoke
  rescue => error
    pp(error)
    sleep(attempt_number)
  else
    break
  end
end

runner.run_task('Recording asset sizes') do
  TrackAssetSizes.new.perform
end

runner.run_task('Creating a `Deploy`') do
  Deploy.create!(git_sha: ENV.fetch('GIT_REV'))
end

runner.run_task('Registering deploy with Sidekiq') do
  system(
    # Use Redis DB 1 because that's what Sidekiq uses (see config/initializers/sidekiq.rb).
    # See https://github.com/mperham/sidekiq/issues/ 5615 for some context.
    { 'REDIS_URL' => RedisOptions.new(db: 1).url },
    Rails.root.join('bin/_sidekiq/mark_deploy.rb').to_s,
    exception: true,
  )
end

runner.run_task('Notifying Rollbar of deploy') do
  access_token = Rails.application.credentials.rollbar!.access_token!
  Faraday.json_connection.post(
    'https://api.rollbar.com/api/1/deploy/',
    {
      'environment' => Rails.env,
      'revision' => ENV.fetch('GIT_REV'),
      'rollbar_username' => 'davidjrunger',
    },
    {
      'X-Rollbar-Access-Token' => access_token,
    },
  )
end
