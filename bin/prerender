#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'bundler'
Bundler.setup(:default, :test)

require 'addressable'
require 'aws-sdk-s3'
require 'dotenv/load' if ENV.fetch('CI', nil) != 'true'
require 'ferrum'
require 'nokogiri'

class Prerenderer
  def initialize
    @browser = Ferrum::Browser.new(process_timeout: 20, timeout: 60)
  rescue Ferrum::ProcessTimeoutError => error
    puts("Rescued error: #{error}.")
    puts("Retrying...")
    retry
  end

  def prerender(url:, filename:, expected_text:)
    url = Addressable::URI.parse(url)
    url.query_values = (url.query_values || {}).merge(prerender: 'true')
    @browser.goto(url.to_s)

    # give Chrome some time to parse the JavaScript and execute it to render the page content
    number_of_attempts = 15
    number_of_attempts.times do |index|
      break if @browser.body.include?(expected_text)

      sleep(0.2)
      fail('Could not find expected content!') if index == number_of_attempts - 1
    end

    upload_prerender_to_s3(
      filename:,
      body: html_for_prerendering("<!DOCTYPE html>\n#{@browser.body}"),
    )
  end

  def quit_browser
    @browser.quit
  end

  private

  def upload_prerender_to_s3(filename:, body:)
    git_sha = `git rev-parse HEAD`.strip
    raise('Could not determine git SHA!') if git_sha.empty?

    Aws::S3::Resource.new(region: 'us-east-1').
      bucket('david-runger-uploads').
      object("prerenders/#{git_sha}/#{filename}").
      put(body:)
  rescue => error
    puts("Error uploading object: #{error.inspect}")
  end

  def html_for_prerendering(html)
    @html_doc = Nokogiri::HTML(html)
    remove_devicon_stylesheet!
    @html_doc.to_s
  end

  def remove_devicon_stylesheet!
    # rubocop:disable Layout/LineLength
    @html_doc.css(
      'link[rel="stylesheet"]' \
      '[href="https://cdn.jsdelivr.net/gh/konpa/devicon@df6431e323547add1b4cf45992913f15286456d3/devicon.min.css"]' \
      '[data-lazyloader-state="spent"]',
    ).remove
    # rubocop:enable Layout/LineLength
  end
end

prerenderer = Prerenderer.new
prerenderer.prerender(
  url: 'https://davidrunger.com',
  filename: 'home.html',
  expected_text: '@davidrunger',
)
prerenderer.quit_browser
