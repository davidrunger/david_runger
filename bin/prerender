#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'bundler'
Bundler.setup(:default, :test)

require 'addressable'
require 'aws-sdk-s3'
require 'dotenv/load' if ENV['CI'] != 'true'
require 'ferrum'
require 'nokogiri'
require 'pry-byebug' if ENV['CI'] != 'true'

class Prerenderer
  def initialize
    @browser = Ferrum::Browser.new(process_timeout: 10, timeout: 60)
  end

  def prerender(url:, filename:)
    url = Addressable::URI.parse(url)
    url.query_values = (url.query_values || {}).merge(prerender: 'true')
    @browser.goto(url.to_s)
    upload_prerender_to_s3(filename: filename, html: "<!DOCTYPE html>\n#{@browser.body}")
  end

  def quit_browser
    @browser.quit
  end

  private

  def upload_prerender_to_s3(filename:, html:)
    Aws::S3::Resource.new(region: ENV['S3_REGION']).
      bucket(ENV['S3_BUCKET']).
      object("prerenders/#{filename}").
      put(body: html_for_prerendering(html))
  rescue => error
    puts("Error uploading object: #{error.inspect}")
  end

  def html_for_prerendering(html)
    @html_doc = Nokogiri::HTML(html)
    recharge_spent_devicon_css_preloader
    remove_webp_class
    @html_doc.to_s
  end

  def recharge_spent_devicon_css_preloader
    spent_css_preloader =
      @html_doc.css(%(head link[rel=stylesheet][onload*="this.rel='stylesheet'"][href*=devicon]))
    spent_css_preloader.attribute('rel', 'preload')
  end

  def remove_webp_class
    @html_doc.css('html').remove_class('webp')
  end
end

prerenderer = Prerenderer.new
prerenderer.prerender(url: 'https://davidrunger.com', filename: 'home.html')
prerenderer.quit_browser
