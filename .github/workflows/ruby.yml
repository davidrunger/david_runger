name: Test (& Deploy)

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test:
    concurrency:
      cancel-in-progress: true
      group: test-${{ github.ref_name }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      # https://stackoverflow.com/q/57915791/4009384
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432 # Maps port 5432 on service container to the host
      redis:
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379 # Maps port 6379 on service container to the host
    steps:
      - name: Configure Postgres for speed over reliability
        run: |
          psql -c "ALTER SYSTEM SET fsync=off;"
          psql -c "ALTER SYSTEM SET full_page_writes=off;"
          psql -c "ALTER SYSTEM SET synchronous_commit=off;"
          psql -c "SELECT pg_reload_conf();"
        env:
          PGHOST: 127.0.0.1
          PGUSER: postgres
          PGPASSWORD: postgres

      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 10 # this might cause issues if there are more than 10 commits in a PR (?)

      - name: Set GIT_REV environment variable
        uses: ./.github/actions/git_rev

      - name: Print context info
        run: |
          echo "Branch: ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          pr=${GITHUB_REF#refs/pull/}
          echo "PR: #${pr%/merge}"
          echo "SHA: $GIT_REV"

      - name: Set up Ruby
        uses: ruby/setup-ruby@7886c6653556e1164c58a7603d88286b5f708293 # v1.228.0
        with:
          bundler-cache: true

      - name: Set up Node
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version-file: .node-version

      - name: Install pnpm
        run: npm install -g pnpm@10

      - name: Set pnpm store directory
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Set up pnpm cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@00cae500b08a931fb5698e11e79bfbd38e612a38 # 2.0.0
        with:
          scandir: './bin'

      - name: Ensure clean git status
        run: '! [[ -n $(git status --porcelain) ]] || (git status && false)'

      - name: Run tests & linters
        run: bin/run-tests
        env:
          CI: true
          PALLETS_CONCURRENCY: 6
          AWS_EC2_METADATA_DISABLED: true
          RAILS_ENV: test
          DISABLE_SPRING: 1
          PERCY_SKIP_UPDATE_CHECK: 1
          VITE_RUBY_AUTO_BUILD: false
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_USER: postgres
          PGPASSWORD: postgres # https://www.postgresql.org/docs/current/libpq-envars.html
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          # The hostname used to communicate with the Redis service container
          REDIS_HOST: redis
          REDIS_PORT: 6379
          AWS_ACCESS_KEY_ID: '${{secrets.AWS_ACCESS_KEY_ID}}'
          AWS_SECRET_ACCESS_KEY: '${{secrets.AWS_SECRET_ACCESS_KEY}}'
          CI_STEP_RESULTS_HOST: '${{secrets.CI_STEP_RESULTS_HOST}}'
          CI_STEP_RESULTS_AUTH_TOKEN: '${{secrets.CI_STEP_RESULTS_AUTH_TOKEN}}'
          PERCY_TOKEN: '${{secrets.PERCY_TOKEN}}'
          CODECOV_TOKEN: '${{secrets.CODECOV_TOKEN}}'
          RAILS_MASTER_KEY: '${{secrets.RAILS_MASTER_KEY}}'

      - name: Save failed feature spec logs
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: failure()
        with:
          name: failed_feature_spec_logs
          path: log/failed_feature_specs/
          retention-days: 5

      - name: Save fixtures artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: failure()
        with:
          name: fixtures
          path: spec/fixtures/
          retention-days: 5

      - name: Upload Code Coverage
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy-and-prerender:
    concurrency:
      group: deploy-and-prerender
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Clone repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up key for SSHing to server
        run: |
          mkdir -p ~/.ssh/
          echo "${{secrets.SSH_KNOWN_HOSTS}}" > ~/.ssh/known_hosts
          echo "${{secrets.SSH_PRIVATE_KEY}}" > ~/.ssh/id_ed25519
          echo "${{secrets.SSH_PUBLIC_KEY}}" > ~/.ssh/id_ed25519.pub
          sudo chmod 600 ~/.ssh/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519

      - name: Set GIT_REV environment variable
        uses: ./.github/actions/git_rev

      - name: Copy deploy script to server and execute it
        run: |
          scp bin/server/deploy.sh "${{secrets.SERVER_USER_AND_IP}}:/tmp/"
          ssh "${{secrets.SERVER_USER_AND_IP}}" \
            "GIT_REV='$GIT_REV' bash /tmp/deploy.sh && rm /tmp/deploy.sh"

      - name: Set up Ruby
        uses: ruby/setup-ruby@7886c6653556e1164c58a7603d88286b5f708293 # v1.228.0
        with:
          bundler-cache: true

      - name: Prerender page(s) and upload them to S3
        run: bin/prerender
        env:
          CI: true
          AWS_ACCESS_KEY_ID: '${{secrets.AWS_ACCESS_KEY_ID}}'
          AWS_SECRET_ACCESS_KEY: '${{secrets.AWS_SECRET_ACCESS_KEY}}'
